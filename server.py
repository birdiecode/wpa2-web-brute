#  Copyright (c) 2025. birdiecode
#
#  This file is part of "wpa2 web brute".
#
#  OfficeControl is licensed under the MIT License.
#  See the LICENSE file for details.
import string

import uvicorn
from fastapi import FastAPI, Request
from starlette.middleware.cors import CORSMiddleware
from starlette.responses import FileResponse

from intervalmanager import SuperIntervalTree

app = FastAPI()
tree = SuperIntervalTree()
tree.set_task(string.ascii_uppercase+string.digits, 8)

#  для тестов написал скип части интервала
tree.add_interval(0, 1301987170000, "parsed")

app.add_middleware(
    CORSMiddleware,
    allow_origins="*",  # Разрешенные источники
    allow_credentials=True,
    allow_methods=["*"],  # Разрешенные методы (GET, POST и т. д.)
    allow_headers=["*"],  # Разрешенные заголовки
)

ssid = "Test_WiFi"
key_data = [0x60, 0xF6, 0x77, 0x00, 0xA9, 0xBA, 0x66, 0x4B, 0x93, 0x37, 0x28, 0x0F, 0xA6, 0x4A, 0xD5, 0x33, 0xD8, 0x74, 0x95, 0xC1, 0x16, 0x34, 0xC0, 0x1F, 0x4E, 0x37, 0xD8, 0x7B, 0x0D, 0x54, 0x14, 0x38, 0x2B, 0xB4, 0x79, 0x1F, 0x51, 0xE3, 0x15, 0xA7, 0x8C, 0x98, 0xB8, 0x7C, 0xEA, 0x03, 0xD0, 0x25, 0x93, 0x58, 0x63, 0xDF, 0xCC, 0x4A, 0x06, 0xA7, 0x62, 0x10, 0xFC, 0x5F, 0x53, 0x81, 0xF0, 0x51, 0x29, 0x3B, 0x27, 0x67, 0x83, 0x52, 0xE1, 0x67, 0xF7, 0x20, 0xF9, 0x9E]
wpa2_data = [0x01, 0x03, 0x00, 0x75, 0x02, 0x01, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEA, 0x03, 0xD0, 0x25, 0x93, 0x58, 0x63, 0xDF, 0xCC, 0x4A, 0x06, 0xA7, 0x62, 0x10, 0xFC, 0x5F, 0x53, 0x81, 0xF0, 0x51, 0x29, 0x3B, 0x27, 0x67, 0x83, 0x52, 0xE1, 0x67, 0xF7, 0x20, 0xF9, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x30, 0x14, 0x01, 0x00, 0x00, 0x0F, 0xAC, 0x04, 0x01, 0x00, 0x00, 0x0F, 0xAC, 0x04, 0x01, 0x00, 0x00, 0x0F, 0xAC, 0x02, 0x80, 0x00]
mic = "be683259f3eb3f5b2c097f8cf5cc3df9"
task_size = 1000


@app.get("/task")
def get_task():
    task = tree.get_task(task_size)
    print(task)
    return {"start": task.begin, "col": task_size, "ssid": ssid, "key_data": key_data, "wpa2_data": wpa2_data, "mic": mic}

@app.get("/info")
def get_info():
    ret = []
    for interval in sorted(tree):
        ret.append({ "begin": interval.begin, "end": interval.end, "status": interval.data })
    return ret

@app.post("/ret")
async def return_result(request: Request):
    data = await request.json()
    print(data)
    tree.add_interval(data['key'], data['key']+task_size, "parsed")
    if data['data'] != "not find":
        print("FIND KEY: " + str(data['data']))
    return {"status": "ok"}

@app.get("/script.js")
async def get_js():
    return FileResponse("wpa2_brute.js", media_type="application/javascript")

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)